---
title: "Creating R Functions"
author: Simisani Nokulunga Ndaba 
format:       
  revealjs:          
    logo: "ukraineflag.jpg" 
    footer: "WORKSHOPS FOR UKRAINE"
    transition: slide
    background-transition: fade
    transition-speed: slow
    chalkboard: true
revealjs-plugins:  #Quarto drop extension
  - drop
filters: 
  - timer
title-slide-attributes:   
  data-background-image: dall_e_fade.jpg      
  data-background-size: cover      
  data-background-position: "center" 
  data-background-color: "midnightblue"
css: styles.css
---

## Call me Simi üòä {background-color="midnightblue"}

::: columns
::: {.column width="40%"}
![](me.png){width="500"}
:::

::: {.column width="60%"}
-   üéìPhD student in Information Systems at BIUST

-   üë©‚ÄçüíºTA \@ Department of Computer Science, University of Botswana

-   Business Analyst at the Gauteng Department of Education in Johannesburg, ZA

-   ‚úçÔ∏è [Occasional blogger](https://medium.com/@simisani.ndaba013), & enjoy creating data visualisations

-   Founder and organiser of [R-Ladies Gaborone](https://r-ladiesgaborone2021.quarto.pub/)
:::
:::

## Goal {background-color="midnightblue"}

learn how to write a function so that we can repeat several operations with a single command

![](target-and-arrowsjpg.png){fig-align="center"}

## Overview {background-color="midnightblue"}

::: columns
::: {.column width="50%"}
-   defining a Functions

-   function components

-   arguments

-   my first function

-   exercises

-   nesting functions
:::

::: {.column width="50%"}
-   variables

-   more exercies

-   documentation

-   even more exercises

-   testing
:::
:::

# Writing R Functions {background-image="boyCoding.jpg"}

## Writing R Functions {background-color="midnightblue"}

An R function is created by using the keyword¬†**function**.

A **user-defined function** is a function created by the user to perform a specific task or calculation.

The basic syntax of an R function definition is as follows ‚àí

``` {.r code-line-numbers="|1|2"}
function_name <- function(arg_1, arg_2, ...){   
  Function body  
}
```

## **Function Components** {background-color="midnightblue"}

The different parts of a function are ‚àí

![](images/clipboard-2185056044.png){width="1500"}

## `fahrenheit_to_celsius()`¬†that converts temperatures from fahrenheit to Celsius {background-color="midnightblue"}

``` {.r code-line-numbers="|1|2|3|5"}
fahrenheit_to_celsius <- function(temp_F) {   
  temp_C <- (temp_F - 32) * 5 / 9   
  return(temp_C)   #return statement:to send a result back to whoever asked for it. 
  } 
fahrenheit_to_celsius(212)
```

## we can also turn Celsius into Kelvin {background-color="midnightblue"}

``` {.r code-line-numbers="|1|2|3|5"}
celsius_to_kelvin <- function(temp_C) {   
  temp_K <- temp_C + 273.15   
  return(temp_K) 
  } 
celsius_to_kelvin(0)
```

## Return Statement {background-color="midnightblue"}

-   In R, it is not necessary to include the return statement.

-   R automatically returns which ever variable is on the last line of the body of the function.

-   While in the learning phase, we will explicitly define the return statement.

## Built-in Functions in R {background-color="midnightblue"}

There are plenty of helpful built-in functions in R used for various purposes. Some of the most popular ones are:

-   `min()`, `max()`, `mean()`, `median()` ‚Äì return the minimum / maximum / mean / median value of a numeric vector, correspondingly

-   `sum()` ‚Äì returns the sum of a numeric vector

-   `range()` ‚Äì returns the minimum and maximum values of a numeric vector

-   `abs()` ‚Äì returns the absulute value of a number

`etc......`

## **Primitive functions** {background-color="midnightblue"}

Built-in f

Have no function components.

Primitive functions, like `sum()`, call C code directly with `.Primitive()` and contain no R code.

Therefore their `formals()`, `body()`, and `environment()` are all `NULL`.

Primitive functions are only found in the `base` package, and since they operate at a low level, they can be more efficient.

# Arguments {background-image="functions2.png"}

## Arguments/Parameters {background-color="midnightblue"}

-   Information can be passed into functions as arguments/parameters.

-   Arguments are specified after the function name, inside the parentheses.

-   When the function is called, we pass along the argument, which is used inside the function to print.

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2|4"}
my_second_function <- function(fname) {
  paste("Hello,", fname)
}
my_second_function("Dariia")
```
:::

## Multiple arguments {background-color="midnightblue"}

-   You can add as many arguments as you want, just separate them with a comma.

``` {.r code-line-numbers="|1|2|4"}
my_arguments_function <- function(fname, lname) {
  paste(fname, lname)
}
my_arguments_function("Shaka", "Zulu")
```

## Calling a Function with Default Argument {background-color="midnightblue"}

``` {.r code-line-numbers="|1|2|3"}
new.function <- function(a = 3, b = 6) {
  result <- a * b
  print(result)
}
```

## Call the function without giving any argument {background-color="midnightblue"}

``` r
new.function()
```

## Call the function with giving new values of the argument. {background-color="midnightblue"}

``` r
new.function(9,5)
```

## Exercise 1 {background-color="midnightblue"}

write a function named `edges()` that returns a vector made up of just the **first** and **last** elements of its input:

-   dry_principle \<- c("Don't", "repeat", "yourself", "or", "others")

-   where, the variable v refers to a vector,

-   then v\[1\] is the vector‚Äôs first element and v\[length(v)\] is its last

```{r}
countdown::countdown(minutes = 2, seconds = 0, left = 0)
```

## Solution: {background-color="midnightblue"}

``` {.r code-line-numbers="|1|2|3|4|5|7|8"}
edges <- function(v) {
  first <- v[1]
  last <- v[length(v)]
  answer <- c(first, last)
  return(answer)
}
dry_principle <- c("Don't", "repeat", "yourself", "or", "others")
edges(dry_principle)
```

# Nested Functions {background-image="function.jpg"}

## Composing Functions {background-color="midnightblue"}

A function can be passed to another.

``` {.r code-line-numbers="|1|2|3|4|6"}
fahrenheit_to_kelvin <- function(temp_F) {
  temp_C <- fahrenheit_to_celsius(temp_F)
  temp_K <- celsius_to_kelvin(temp_C)
  return(temp_K)
}
fahrenheit_to_kelvin(32.0)
```

## one line of code Functions {background-color="midnightblue"}

function composition\
The immediate application of one function to the result of another, such as f(g(x)).

``` r
celsius_to_kelvin(fahrenheit_to_celsius(32.0))
```

### 

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2"}
f = function(x) x^2*4+x/3
f(9)
```
:::

# Variables {background-image="variables.png"}

## Global Variable {background-color="midnightblue"}

-   Variables that are created outside of a function are known as Global variables.

-   Global variables can be used by everyone, both inside of functions and outside

``` r
input_1 <- 20
```

## Global variables used everywhere {background-color="midnightblue"}

### Used Inside

``` {.r code-line-numbers="|1|3|4|5|7"}
input_1 <- 20

mySum <- function(input_1, input_2 = 10) { #used inside
  output <- input_1 + input_2
  return(output)
}
mySum(2,5)
```

::: {.fragment .fadein}
**Used Outside**
:::

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2|3|5"}
txt <- "awesome"
my_inside_function <- function() {
  paste("R is", txt)          #used outside
}
my_inside_function()
```
:::

## Exercise 2 {background-color="midnightblue"}

``` r
mySum <- function(input_1, input_2 = 10) { 
  output <- input_1 + input_2
  return(output)
}
mySum(2,5)
```

‚ùîGiven the above code was run, which value does mySum(input_1 = 1, 3) produce?\
a. 4\
b.11\
c. 23\
d. 30

::: {.fragment .fadein}
**Answer:** a
:::

## Exercise 3 {background-color="midnightblue"}

``` r
mySum <- function(input_1, input_2 = 10) { 
  output <- input_1 + input_2
  return(output)
}
mySum(2,5)
```

‚ùî If mySum(3) returns 13, why does mySum(input_2 = 3) return an error?

::: {.fragment .fade-in}
**Answer:**

Reading the error message: argument "input_1" is missing, with no default means that no value for input_1 is provided in the function call, and neither in the function‚Äôs definition. Thus, the addition in the function body can not be completed.\
:::

## Exercise 4 {background-color="midnightblue"}

Write a `sqt_funct()` that prints that squares of the numbers from 1 to `a`.

```{r}
countdown::countdown(minutes = 2, seconds = , left = 0)
```

::: {.fragment .fadein}
**Solution:**
:::

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2|3|4"}
new.function <- function(a) {
  for(i in 1:a) {
    b <- i^2
    print(b)
  }
}

new.function(10)
```
:::

## Recursion Functions {background-color="midnightblue"}

-   A function that calls itself is called a recursive function and this technique is known as recursion.

-   Used to solve problems by breaking them into smaller and simpler sub-problems.

    ::: panel-tabset
    ## Factorial of a number

    ``` {.r code-line-numbers="|1|3|4|5|6"}
    Factorial <- function(r)
    {
    if (r == 0)
    return(1)
    else
    return( r * Factorial (r-1))
    }
    ```

    ## Sum of squares

    ``` {.r code-line-numbers="|1|3|4|5|6|9"}
    Sum.Series <- function(number)
    {
      if(number == 0) {
        return (0)
      } else {
        return ((number * number ) + Sum.Series(number - 1))
      }
    }
    Sum.Series(4)
    ```

    ## Sort

    ``` {.r code-line-numbers="|1|2|3|4|5|6|7|8|9|10|11"}
    quicksort <- function(vec){
      if(length(vec)<=1){
        return(vec)
      } else {
        subject <- vec[1]
        predicate <- vec[-1]
        large <- predicate[predicate>subject]
        small <- predicate[predicate<=subject]
        large <- quicksort(large)
        small <- quicksort(small)
        return(c(small,subject,large))
      }
    }
    quicksort(c(4,82,23,0,-15,16,31,-29))
    ```
    :::

## Files in Functions {background-color="midnightblue"}

::: {.fragment .fadein}
Write a function called analyze() that takes a filename as an argument and produce average, max & min inflammation plots over time
:::

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2-3|4|5|6|7|8|9|10|12-13"}
analyze <- function(filename) {
  # Plots the average, min, and max inflammation over time.
  # Input is character string of a csv file.
  dat <- read.csv(file = filename, header = FALSE)
  avg_day_inflammation <- apply(dat, 2, mean)
  plot(avg_day_inflammation)
  max_day_inflammation <- apply(dat, 2, max)
  plot(max_day_inflammation)
  min_day_inflammation <- apply(dat, 2, min)
  plot(min_day_inflammation)
}
analyze("inflammation-01.csv")
analyze("inflammation-02.csv")
```
:::

##  {background-color="midnightblue"}

::: {.callout-note appearance="simple"}
*"The purpose of computing is insight, not computing"*

Richard Hamming
:::

# Documentation {background-image="doc-code-documentation-inline.png"}

## Writing Documentation {background-color="midnightblue"}

A common way to put documentation in software is to add comments.

``` {.r code-line-numbers="|2-4|"}
mySum <- function(input_1, input_2 = 10) {
  # return a new vector containing the original data centered around the
  # midpoint.
  # Example: center(c(1, 2, 3), 0) => c(-1, 0, 1)
  output <- input_1 + input_2
  return(output)
}
```

## Functions in R Packages {background-color="midnightblue"}

-   The great majority of functions to perform these tasks are available in external packages or libraries.

-   Packages are collections of R functions, data, and compiled code in a well-defined format created to add specific functionality.

-   Most of these packages can be used for free, and can be found in popular packages, repositories, such as CRAN, which currently feature nearly 20,000 contributed packages.

-   To use the functions available in a package, you first will need to install it.

## Functions in R Packages cont... {background-color="midnightblue"}

-   For example, if you want to install dplyr, a popular package to work with regular expressions.

    ``` {.r code-line-numbers="|1|2|4|6|8|10"}
    install.packages('dplyr')
    library(dplyr)

    ls("package:dplyr")     #list of functions

    help(package = dplyr)  #explanation of functions

    library(base)

    ?sum()    #Function documentation
    ```

## Exercise 5 {background-color="midnightblue"}

The following code makes a list of all functions in the {base} package.

``` {.r code-line-numbers="|1|2|3"}
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE) 
funs <- Filter(is.function, objs) 
```

a\. Which base function has the most arguments?

b\. How many base functions have no argument, what‚Äôs special about those functions?

c\. How could you adapt the code to find all primitive functions?

```{r}
countdown::countdown(minutes = 0, seconds = 42, left = 0)
```

## Exercise 5: Solution {background-color="midnightblue"}

a\. To find the function with the most arguments,

``` {.r code-line-numbers="|1|2|3|4|5|7|9|10|11"}
#Step 1.  we first compute the length of formals() (Access to and Manipulation of the Formal Arguments).
library(purrr)
n_args <- funs %>% 
  map(formals) %>%
  map_int(length)

#Step 2.  Then we sort n_args in decreasing order and look at its first entries.

n_args %>% 
  sort(decreasing = TRUE) %>%
  head()
```

## Exercise 5: Solution cont... {background-color="midnightblue"}

b\. How many base functions have no arguments

::: {.fragment .fadein}
``` {.r code-line-numbers="|2|5|6|7|8|9"}
#number of functions with no arguments
sum(n_args == 0)

 #first remove the primitive functions 
n_args2 <- funs %>% 
discard(is.primitive) %>%  
map(formals) %>%
map_int(length)
sum(n_args2 == 0)
```
:::

::: {.fragment .fadein}
c.  To find all primitive functions
:::

::: {.fragment .fadein}
``` {.r code-line-numbers="|1|2"}
funs <- Filter(is.primitive, objs)
length(funs)
```
:::

# Testing Functions {background-image="testing.jpg"}

## `testthat` package {background-color="midnightblue"}

-   The¬†[testthat R package](https://github.com/r-lib/testthat)¬†is a helpful way to get started writing tests for the code that you write.

``` {.r code-line-numbers="|1|3-5|8|10|13|16"}
library(testthat)

F_to_C <- function(F_temp){   #function 
  C_temp <- (F_temp - 32) * 5/9;
  return(C_temp);
  }

test_that(desc = "Fahrenheit to Celsius", code = {
  
  temp_C <- F_to_C(50); # Runs the function
  
  # Test that the result is the correct value
  expect_that( object = temp_C, condition = equals(10) );
  
  # Test that the result is numeric
  expect_that( object = is.numeric(temp_C), condition = equals(TRUE) );
})
```

## What we covered {background-color="midnightblue"}

::: columns
::: {.column width="60%"}
-   Function Components -\
    name \| arguments \| body

-   User defined and Primitive functions

-   Functions with Singular/Multiple/With/Without Arguments/Parameters

-   Global Variables
:::

::: {.column width="40%"}
-   Nested Functions

-   Function Docs

-   Testing Functions
:::
:::

## Get in Touch {background-color="midnightblue"}

::: columns
::: {.column width="60%"}
Mastodon:üêò [\@simisani](https://mastodon.social/@simisani)

[simisani ndaba](https://www.linkedin.com/in/simisani-ndaba-90843650/)

Github: [sndaba](https://github.com/sndaba)

[r-ladiesgaborone2021.quarto.pub](https://r-ladiesgaborone2021.quarto.pub/){.uri}
:::

::: {.column width="40%"}
![](blackGirlSaysHey.gif){width="1000"}
:::
:::

![](linkedin.png){.absolute top="140" right="700" width="80"}

![](rladiesgaboronehexsticker.png){.absolute top="330" right="550" width="200"}

#  {background-image="weStandWithUkraine.jpg"}
